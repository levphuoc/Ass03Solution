@page "/members"
@using BLL.Services.IServices
@using BLL.Services
@inject IMemberService MemberService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using DataAccessLayer.Entities
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client

@if (currentUser == null)
{
    <div class="alert alert-warning">
        <p>You need to log in to access this page.</p>
        <button class="btn btn-primary" @onclick="RedirectToLogin">Go to Login</button>
    </div>
}
else if (!AuthService.IsInRole("Admin") && !AuthService.IsInRole("Staff"))
{
    <div class="alert alert-danger">
        <p>You do not have permission to access this page. Only Administrators and Staff can manage members.</p>
        <button class="btn btn-primary" @onclick="RedirectToHome">Go to Home</button>
    </div>
}
else
{
    <h3>Members Management</h3>
    <div class="mb-3">
        <span class="badge bg-info">Your role: @currentUser.Role</span>
    </div>

    @if (members == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row align-items-end mb-3">
            <div class="col-md-4">
                <label class="form-label">Email:</label>
                <InputText @bind-Value="searchEmail" class="form-control" placeholder="Enter email..." />
            </div>
            <div class="col-md-4">
                <label class="form-label">Company Name:</label>
                <InputText @bind-Value="searchCompanyName" class="form-control" placeholder="Enter company name..." />
            </div>
            <div class="col-md-4 d-flex gap-2">
                <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" @onclick="OnSearchAsync">
                    <i class="fas fa-search me-2"></i> Search
                </button>
                <button class="btn btn-outline-secondary w-100 d-flex align-items-center justify-content-center" @onclick="ResetSearch">
                    <i class="fas fa-redo me-2"></i> Reset
                </button>
            </div>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Email</th>
                    <th>Company</th>
                    <th>City</th>
                    <th>Country</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in members)
                {
                    <tr>
                        <td>@member.MemberId</td>
                        <td>@member.Email</td>
                        <td>@member.CompanyName</td>
                        <td>@member.City</td>
                        <td>@member.Country</td>
                        <td>@member.Role</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditMember(member)">Edit</button>
                            @if (AuthService.IsInRole("Admin"))
                            {
                                <button class="btn btn-danger" @onclick="() => ConfirmDelete(member)">Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <button class="btn btn-success" @onclick="AddNewMember">Add New</button>

    @if (isEditing)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(selectedMember.MemberId == 0 ? "Add New Member" : "Edit Member")</h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>
                    <div class="modal-body">

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mb-3">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                @errorMessage
                            </div>
                        }

                        <EditForm Model="selectedMember" OnValidSubmit="SaveMember">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />
                            
                            <div class="mb-3">
                                <label>Email:</label>
                                <InputText @bind-Value="selectedMember.Email" class="form-control" />
                                <ValidationMessage For="@(() => selectedMember.Email)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label>Company:</label>
                                <InputText @bind-Value="selectedMember.CompanyName" class="form-control" />
                                <ValidationMessage For="@(() => selectedMember.CompanyName)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label>City:</label>
                                <InputText @bind-Value="selectedMember.City" class="form-control" />
                                <ValidationMessage For="@(() => selectedMember.City)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label>Country:</label>
                                <InputText @bind-Value="selectedMember.Country" class="form-control" />
                                <ValidationMessage For="@(() => selectedMember.Country)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label>Password:</label>
                                <InputText @bind-Value="selectedMember.Password" class="form-control" type="password" />
                                <ValidationMessage For="@(() => selectedMember.Password)" class="text-danger" />
                            </div>
                            @if (AuthService.IsInRole("Admin"))
                            {
                                <div class="mb-3">
                                    <label>Role:</label>
                                    <InputSelect @bind-Value="selectedMember.Role" class="form-control">
                                        <option value="">Select a role</option>
                                        <option value="Deliverer">Deliverer</option>
                                        <option value="User">User</option>
                                        <option value="Admin">Admin</option>
                                        <option value="Staff">Staff</option>
                                        <option value="Shipper">Shipper</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => selectedMember.Role)" class="text-danger" />
                                </div>
                            }
                            <div class="modal-footer">
                                <button type="submit" class="btn btn-primary">Save</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showDeleteConfirm)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header @(memberToDelete?.Role == "Admin" ? "bg-danger text-white" : "")">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirm = false"></button>
                    </div>
                    <div class="modal-body">
                        @if (memberToDelete?.Role == "Admin")
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle"></i>
                                <strong>Warning:</strong> You are about to delete an Admin account.
                            </div>
                            <p>Are you sure you want to delete the admin user <strong>@memberToDelete.Email</strong>?</p>
                            <p>This action cannot be undone and will remove all associated permissions.</p>
                        }
                        else
                        {
                            <p>Are you sure you want to delete the user <strong>@memberToDelete?.Email</strong>?</p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">Cancel</button>
                        @if (memberToDelete?.Role == "Admin")
                        {
                            <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteAdmin">
                                <i class="fas fa-exclamation-triangle"></i> Yes, Delete Admin
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteMember(memberToDelete.MemberId)">Delete</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Member> members;
    private Member currentUser;
    private Member selectedMember = new Member();
    private Member memberToDelete;
    private bool isEditing = false;
    private bool showDeleteConfirm = false;
    private bool adminDeleteConfirmed = false;
    private string errorMessage;
    private bool isLoading = true;
    private string searchEmail = string.Empty;
    private string searchCompanyName = string.Empty;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null && (AuthService.IsInRole("Admin") || AuthService.IsInRole("Staff")))
        {
            await LoadMembers();
            await SetupSignalR();
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            members = (await MemberService.GetMembersAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load members: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void RedirectToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void AddNewMember()
    {
        selectedMember = new Member { Role = "User" }; // Default role
        isEditing = true;
        StateHasChanged();
    }

    private void EditMember(Member member)
    {
        selectedMember = new Member
            {
                MemberId = member.MemberId,
                Email = member.Email,
                CompanyName = member.CompanyName,
                City = member.City,
                Country = member.Country,
                Password = member.Password,
                Role = member.Role
            };
        isEditing = true;
        StateHasChanged();
    }

    private void ConfirmDelete(Member member)
    {
        memberToDelete = member;
        showDeleteConfirm = true;
        adminDeleteConfirmed = false;
        StateHasChanged();
    }

    private void ConfirmDeleteAdmin()
    {
        if (memberToDelete?.Role == "Admin")
        {
            adminDeleteConfirmed = true;
            DeleteMember(memberToDelete.MemberId);
        }
    }

    private async Task SaveMember()
    {
        try
        {
            errorMessage = null; // Reset lỗi trước khi thực hiện
            
            // Additional validation for required fields
            if (string.IsNullOrWhiteSpace(selectedMember.Email))
            {
                errorMessage = "Email is required.";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(selectedMember.CompanyName))
            {
                errorMessage = "Company name is required.";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(selectedMember.City))
            {
                errorMessage = "City is required.";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(selectedMember.Country))
            {
                errorMessage = "Country is required.";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(selectedMember.Password))
            {
                errorMessage = "Password is required.";
                return;
            }
            
            if (string.IsNullOrWhiteSpace(selectedMember.Role))
            {
                errorMessage = "Role is required.";
                return;
            }
            
            if (selectedMember.MemberId == 0)
            {
                await MemberService.AddMemberAsync(selectedMember);
            }
            else
            {
                var memberToUpdate = new Member
                    {
                        MemberId = selectedMember.MemberId,
                        Email = selectedMember.Email,
                        CompanyName = selectedMember.CompanyName,
                        City = selectedMember.City,
                        Country = selectedMember.Country,
                        Password = selectedMember.Password,
                        Role = selectedMember.Role
                    };

                await MemberService.UpdateMemberAsync(memberToUpdate);
            }

            await LoadMembers();
            await SetupSignalR();
            isEditing = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; // Hiển thị lỗi từ service
            Console.WriteLine($"Error saving member: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task DeleteMember(int id)
    {
        if (AuthService.IsInRole("Admin"))
        {
            var memberToDelete = members.FirstOrDefault(m => m.MemberId == id);

            // Check if trying to delete Admin without confirmation
            if (memberToDelete?.Role == "Admin" && !adminDeleteConfirmed)
            {
                return;
            }

            await MemberService.DeleteMemberAsync(id);
            await LoadMembers();
            showDeleteConfirm = false;
            adminDeleteConfirmed = false;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        StateHasChanged();
    }

    private async Task OnSearchAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            members = (await MemberService.SearchMembersAsync(searchEmail, searchCompanyName)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Search failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResetSearch()
    {
        searchEmail = string.Empty;
        searchCompanyName = string.Empty;
        await LoadMembers();
    }

    private async Task SetupSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/memberHub"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On("ReceiveUpdate", async () =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadMembers();
                    StateHasChanged();
                });
            });

            hubConnection.Reconnected += async (connectionId) =>
            {
                await InvokeAsync(StateHasChanged);
            };

            hubConnection.Closed += async (error) =>
            {
                await InvokeAsync(StateHasChanged);
                await Task.Delay(new Random().Next(0, 5) * 1000);
                await hubConnection.StartAsync();
            };

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR Connection Error: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}