@page "/trackingorders"
@rendermode InteractiveServer

@using BLL.Services
@using BLL.Services.IServices
@using BLL.DTOs
@using DataAccessLayer.Enum
@using Microsoft.AspNetCore.SignalR.Client
@inject ITrackingOrderService TrackingOrderService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Tracking Orders Dashboard</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-primary">📦 Tracking Orders Dashboard</h1>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-info text-white shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Total Tracking Orders</h5>
                    <h2>@totalTrackingOrders</h2>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card bg-light text-dark shadow-sm">
            <div class="card-body">
                <h5 class="card-title">Tracking Order Status</h5>
                <select class="form-select" @onchange="OnStatusChanged">
                    <option value="ALL">All</option>
                    <option value="Spending">Spending</option>
                    <option value="Approve">Approve</option>
                    <option value="Reject">Reject</option>
                    <option value="Shipping">Shipping</option>
                    <option value="Shipped">Shipped</option>
                </select>
            </div>
        </div>
    </div>

    <div class="card shadow-sm mt-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Tracking Order List</h5>
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Status</th>
                        <th>Member ID</th>
                        <th>Created At</th>
                        <th>Updated At</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var trackingOrder in trackingOrders)
                    {
                        <tr>
                            <td>@trackingOrder.OrderId</td>
                            <td>
                                @switch (trackingOrder.Status)
                                {
                                    case DataAccessLayer.Enum.OrderStatus.Spending:
                                        <span class="badge bg-warning">SPENDING</span>
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Approve:
                                        <span class="badge bg-success">APPROVE</span>
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Reject:
                                        <span class="badge bg-danger">REJECT</span>
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Shipping:
                                        <span class="badge bg-info">SHIPPING</span>
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Shipped:
                                        <span class="badge bg-primary">SHIPPED</span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">UNKNOWN</span>
                                        break;
                                }
                            </td>
                            <td>@trackingOrder.MemberId</td>
                            <td>@trackingOrder.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                            <td>@trackingOrder.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        </tr>
                    }
                </tbody>
            </table>

            <nav>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage">❮</button>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="NextPage">❯</button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    private List<TrackingOrderDTO> trackingOrders = new();
    private int totalTrackingOrders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int totalPages;
    private string selectedStatus = "ALL";
    private HubConnection? hubConnection;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
           .WithAutomaticReconnect()
           .Build();
        hubConnection.On<int, string>("ReceiveStatusChange", async (orderId, newStatus) =>
     {
         var order = trackingOrders.FirstOrDefault(o => o.OrderId == orderId);
         if (order != null && Enum.TryParse<OrderStatus>(newStatus, out var updatedStatus))
         {
             order.Status = updatedStatus;

         }
         await InvokeAsync(StateHasChanged);
     });

        await hubConnection.StartAsync();
        await RefreshTrackingOrders();
    }

    private async Task RefreshTrackingOrders()
    {
        totalTrackingOrders = await TrackingOrderService.GetTotalOrdersAsync();
        totalPages = (int)Math.Ceiling(totalTrackingOrders / (decimal)pageSize);
        await LoadTrackingOrdersAsync(currentPage);
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        currentPage = 1;
        await LoadTrackingOrdersAsync(currentPage);
    }

    private async Task LoadTrackingOrdersAsync(int pageNumber)
    {
        trackingOrders = await TrackingOrderService.GetPagedTrackingOrdersAsync(pageNumber, pageSize, selectedStatus);
        currentPage = pageNumber;
        await InvokeAsync(StateHasChanged);
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadTrackingOrdersAsync(currentPage);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadTrackingOrdersAsync(currentPage);
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            await LoadTrackingOrdersAsync(pageNumber);
        }
    }
}
