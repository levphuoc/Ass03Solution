@page "/salesReport"
@rendermode InteractiveServer
@using BLL.DTOs
@using BLL.Extensions
@using BLL.Services.FirebaseServices.Interfaces
@using BLL.Services.FirebaseServices.Utilities
@using BLL.Services.IServices
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@inject ISalesReportService SalesReportService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@* @inject IFirebaseAnalyticsService FirebaseAnalytics *@
@inject eStore.Utils.IFileSaveAndLoadUtil FileUtil

<h3 class="text-primary mb-4"><i class="fas fa-chart-line me-2"></i>Sales Report</h3>
<div class="card shadow-sm p-4 mb-5">
    <div class="row g-4 align-items-end">
        <div class="col-md-3">
            <label class="form-label fw-semibold">Start Date</label>
            <InputDate @bind-Value="StartDate" class="form-control" />
        </div>

        <div class="col-md-3">
            <label class="form-label fw-semibold">End Date</label>
            <InputDate @bind-Value="EndDate" class="form-control" />
        </div>

        <div class="col-md-3">
            <label class="form-label fw-semibold">Chart Type</label>
            <select class="form-select" @bind="SelectedChartType">
                <option value="pie">Pie Chart</option>
                <option value="bar">Bar Chart</option>
                <option value="line">Line Chart</option>
            </select>
        </div>

        <div class="col-md-3 text-end">
            <button class="btn btn-primary w-100" @onclick="GenerateReport" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <i class="fas fa-sync-alt me-2">Generate Report</i>
                }
            </button>
        </div>
    </div>

    @if (SalesReportData.Any())
    {
        <hr class="my-4" />

        <div class="row g-3">
            <div class="col-md-9 d-flex align-items-center gap-4">
                <div class="input-group">
                    <label class="input-group-text" for="chartUpload">
                        <i class="fas fa-upload"></i> Upload Chart
                    </label>
                    <InputFile id="chartUpload" OnChange="OnChartFileSelected" accept="image/png" class="form-control" />
                </div>

                @if (SelectedFile != null)
                {
                    <small class="text-muted ms-1">Selected: <strong>@SelectedFile.Name</strong></small>
                }

            </div>

            <div class="col-md-3 text-end">
                <button class="btn btn-success w-100" @onclick="UploadChartToFirebase" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <i class="fas fa-upload me-2">Upload Chart to Firebase</i>
                    }
                </button>
            </div>
        </div>

        <div class="row mt-4 justify-content-end">
            <div class="col-auto d-flex gap-2">
                <button class="btn btn-outline-danger" @onclick="SaveChartToImage">
                    <i class="fas fa-image me-1"></i> Save Chart as Image
                </button>
                <button class="btn btn-outline-secondary" @onclick="ExportToCsv">
                    <i class="fas fa-file-csv me-1"></i> Export to CSV
                </button>
                <button class="btn btn-outline-danger" @onclick="ExportToPdf">
                    <i class="fas fa-file-pdf me-1"></i> Export to PDF
                </button>
            </div>
        </div>
    }
</div>

@if (!string.IsNullOrWhiteSpace(UploadStatusMessage))
{
    <div class="alert alert-success mt-3">
        <strong>@UploadStatusMessage</strong><br />
        @if (!string.IsNullOrWhiteSpace(UploadedFileUrl))
        {
            <a href="@UploadedFileUrl" target="_blank" class="text-decoration-underline">View uploaded file</a>
        }
    </div>
}

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger mt-3 text-center">
        <strong>@ErrorMessage</strong>
    </div>
}
@if (SalesReportData?.Any() == true)
{
    <div class="mt-5">
        <h5>Results from <strong>@StartDate.ToString("yyyy-MM-dd")</strong> to <strong>@EndDate.ToString("yyyy-MM-dd")</strong></h5>

        <div class="row g-2 mb-3">
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="🔍 Search Product Name..." @bind="SearchTerm" @bind:event="oninput" />
            </div>
            <div class="col-md-4">
                <input type="number" class="form-control" placeholder="Min Quantity" @bind="MinQuantity" @bind:event="oninput" />
            </div>
            <div class="col-md-4">
                <input type="number" class="form-control" placeholder="Min Revenue" @bind="MinRevenue" @bind:event="oninput" />
            </div>
        </div>

        <table class="table table-bordered table-hover shadow-sm" id="sales-report-table">
            <thead class="table-dark">
                <tr>
                    <th>Product Name</th>
                    <th class="text-end" @onclick="() => ApplySorting(nameof(SalesReportDTO.TotalQuantity))">
                        Total Quantity
                        @if (CurrentSortColumn == nameof(SalesReportDTO.TotalQuantity))
                        {
                            <i class="@(SortDescending ? "fas fa-arrow-down" : "fas fa-arrow-up")"></i>
                        }
                    </th>
                    <th class="text-end" @onclick="() => ApplySorting(nameof(SalesReportDTO.TotalRevenue))">
                        Total Revenue
                        @if (CurrentSortColumn == nameof(SalesReportDTO.TotalRevenue))
                        {
                            <i class="@(SortDescending ? "fas fa-arrow-down" : "fas fa-arrow-up")"></i>
                        }
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in FilteredAndSortedData)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td class="text-end">@item.TotalQuantity</td>
                        <td class="text-end">@item.TotalRevenue.ToString("C")</td>
                    </tr>
                }
            </tbody>

            <div class="mt-5">
                <h5 class="mb-3">Sales Chart (@SelectedChartType.ToUpperInvariant())</h5>
                <div style="position: relative; height: 50vh;">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
        </table>
    </div>
}
else if (HasGenerated)
{
    <div class="alert alert-warning mt-4 text-center">
        No data found for the selected period.
    </div>
}
@code {
    #region State

    private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-7);
    private DateTime EndDate { get; set; } = DateTime.Today;

    private List<SalesReportDTO> SalesReportData { get; set; } = new();
    private bool IsLoading = false;
    private bool HasGenerated = false;
    private string? ErrorMessage = null;

    private HubConnection? hubConnection;
    private string SelectedChartType { get; set; } = "bar";

    // Filtering
    private string SearchTerm { get; set; } = "";
    private int? MinQuantity { get; set; }
    private decimal? MinRevenue { get; set; }

    // Sorting
    private string CurrentSortColumn { get; set; } = nameof(SalesReportDTO.TotalRevenue);
    private bool SortDescending { get; set; } = true;

    // Chart
    private string CurrentChartFileName => $"SalesChart_{DateTime.Now:MMMddyy_HHmmss}.png";
    private IBrowserFile? SelectedFile;
    private string? UploadStatusMessage = null;
    private string? UploadedFileUrl = null;
    private string? SelectedFileName = null;

    #endregion

    #region Computed Properties

    private IEnumerable<SalesReportDTO> FilteredAndSortedData => SalesReportData
        .Where(x => string.IsNullOrWhiteSpace(SearchTerm) || x.ProductName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
        .Where(x => !MinQuantity.HasValue || x.TotalQuantity >= MinQuantity.Value)
        .Where(x => !MinRevenue.HasValue || x.TotalRevenue >= MinRevenue.Value)
        .OrderByDynamic(CurrentSortColumn, SortDescending);

    #endregion

    #region Lifecycle

    protected override async Task OnInitializedAsync()
    {
        await SetupSignalRConnection();
        // await FirebaseAnalytics.LogEventAsync("screen_view", new Dictionary<string, object>
        // {
        //     { "screen_name", "SalesReport" },
        //     { "user_role", "admin" }
        // });
    }

    #endregion

    #region SignalR Setup

    private async Task SetupSignalRConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/salesReportHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<List<SalesReportDTO>>("SalesReportGenerated", async (data) =>
        {
            Console.WriteLine($"📈 Report received with {data.Count} entries.");
            SalesReportData = data;
            IsLoading = false;
            HasGenerated = true;
            ErrorMessage = null;

            await InvokeAsync(StateHasChanged);
            await GenerateChart();
        });

        hubConnection.Closed += async (error) =>
        {
            Console.WriteLine("🔌 SignalR disconnected. Attempting reconnect...");
            IsLoading = false;
            await Task.Delay(3000);
            await hubConnection.StartAsync();
        };

        await hubConnection.StartAsync();
    }

    #endregion

    #region Sorting

    private void ApplySorting(string columnName)
    {
        if (CurrentSortColumn == columnName)
            SortDescending = !SortDescending;
        else
        {
            CurrentSortColumn = columnName;
            SortDescending = true;
        }
    }

    #endregion

    #region Report Generation

    private async Task GenerateReport()
    {
        Console.WriteLine("📤 Generating report...");

        if (StartDate > EndDate)
        {
            ErrorMessage = "Start date must be earlier than End date.";
            return;
        }

        if (hubConnection?.State == HubConnectionState.Connected)
        {
            IsLoading = true;
            HasGenerated = false;
            ErrorMessage = null;
            SalesReportData.Clear();

            try
            {
                await hubConnection.InvokeAsync("TriggerReport", StartDate, EndDate);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"⚠️ Report request failed: {ex.Message}";
                IsLoading = false;
            }
        }
        else
        {
            ErrorMessage = "⚠️ SignalR not connected. Try refreshing the page.";
        }
    }

    #endregion

    #region Chart Logic
    private async Task OnChartFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
            return;

        SelectedFile = file;
        SelectedFileName = file?.Name;
        UploadStatusMessage = null;
        ErrorMessage = null;

        var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // up to 10MB

        string firebaseKeyPath = ProgramUtils.GetKeyPath();
        string firebasePath = $"SalesReport/{DateTime.Now:MMMddyy}/{file.Name}";

        var firebaseService = FirebaseServiceUtils.CreateStorageService(firebaseKeyPath);
        var uploadedUrl = await firebaseService.UploadFileAsync(stream, firebasePath);

        Console.WriteLine($"Uploaded chart to Firebase: {uploadedUrl}");
    }

    private async Task GenerateChart()
    {
        if (SalesReportData.Any())
        {
            await RenderChart();
        }
    }

    private async Task RenderChart()
    {
        var labels = SalesReportData.Select(x => x.ProductName).ToArray();
        var revenues = SalesReportData.Select(x => x.TotalRevenue).ToArray();

        await JSRuntime.InvokeVoidAsync("renderSalesChart", labels, revenues, SelectedChartType);
    }

    private async Task SaveChartToImage()
    {
        try
        {
            var fileName = CurrentChartFileName;
            await JSRuntime.InvokeVoidAsync("saveChartImageToLocal", "salesChart", fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ JSInterop failed: {ex.Message}");
        }
    }
    [JSInvokable]
    public async Task OnChartFilePicked(string base64Image, string fileName)
    {
        try
        {
            var uploadedUrl = await FirebaseServiceUtils.UploadBase64ImageAsync(base64Image, fileName);

            Console.WriteLine($"Uploaded: {uploadedUrl}");
            UploadStatusMessage = "Upload successful!";
            UploadedFileUrl = uploadedUrl;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Upload failed: {ex.Message}");
            ErrorMessage = "Upload failed.";
        }
    }


    #endregion

    #region Export Functions
    private async Task ExportToCsv()
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("Product Name,Total Quantity,Total Revenue");

        foreach (var item in SalesReportData)
        {
            csvBuilder.AppendLine($"{item.ProductName},{item.TotalQuantity},{item.TotalRevenue}");
        }

        var csvBytes = Encoding.UTF8.GetBytes(csvBuilder.ToString());
        await JSRuntime.InvokeVoidAsync("downloadFileWithDialog", $"sales-report_{StartDate:yyyyMMdd}_{EndDate:yyyyMMdd}.csv", csvBytes, "text/csv");
    }


    private async Task ExportToPdf()
    {
        await JSRuntime.InvokeVoidAsync("generatePdfFromTable", "sales-report-table", "salesChart", $"Sales_Report_{StartDate:yyyyMMdd}_{EndDate:yyyyMMdd}.pdf");
    }
    private async Task UploadChartToFirebase()
    {
        IsLoading = true;
        UploadStatusMessage = null;
        UploadedFileUrl = null;

        if (SelectedFile == null)
        {
            ErrorMessage = "Please select a file first.";
            IsLoading = false;
            return;
        }

        try
        {
            using var stream = SelectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var uploadedUrl = await FirebaseServiceUtils.UploadFileAsync(stream, SelectedFile.Name, ProgramUtils.GetKeyPath());

            UploadStatusMessage = "Upload successful!";
            UploadedFileUrl = uploadedUrl;
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Upload failed: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    #endregion
}

