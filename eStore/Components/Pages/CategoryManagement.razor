@page "/categories"
@rendermode InteractiveServer
@using DataAccessLayer.Entities
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using BLL.DTOs
@using BLL.Services.IServices
@using AutoMapper
@implements IAsyncDisposable
@attribute [Authorize(Policy = "RequireAdmin")]
@inject ICategoryService CategoryService
@inject IMapper Mapper
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Category Management</h3>

<div class="row mb-4">
    <div class="col">
        <button class="btn btn-success" @onclick="ShowAddCategoryModal">Add New Category</button>
        <button class="btn btn-info ms-2" @onclick="TestJavaScript">Test JS Connection</button>
    </div>
</div>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categories)
                {
                    <tr>
                        <td>@category.CategoryId</td>
                        <td>@category.CategoryName</td>
                        <td>
                            @if (string.IsNullOrEmpty(category.Description))
                            {
                                <span class="text-muted">No description</span>
                            }
                            else
                            {
                                @category.Description
                            }
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowEditCategoryModal(category)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategoryWithJS(category.CategoryId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add/Edit Category Modal -->
@if (showCategoryModal)
{
    <div class="modal show" style="display: block; background-color: rgba(0,0,0,0.4);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isNewCategory ? "Add Category" : "Edit Category")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <strong>Error:</strong> @errorMessage
                        </div>
                    }
                    
                    @if (isNewCategory)
                    {
                        <EditForm Model="newCategory" OnValidSubmit="HandleValidSubmitCreate">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="categoryName" class="form-label">Category Name <span class="text-danger">*</span></label>
                                <InputText id="categoryName" class="form-control" @bind-Value="newCategory.CategoryName" placeholder="Enter category name" />
                                <ValidationMessage For="@(() => newCategory.CategoryName)" />
                                <small class="text-muted">Required, max 40 characters</small>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="newCategory.Description" rows="3" placeholder="Enter description (optional)" />
                                <ValidationMessage For="@(() => newCategory.Description)" />
                                <small class="text-muted">Optional, max 500 characters</small>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="updateCategory" OnValidSubmit="HandleValidSubmitUpdate">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="categoryName" class="form-label">Category Name <span class="text-danger">*</span></label>
                                <InputText id="categoryName" class="form-control" @bind-Value="updateCategory.CategoryName" placeholder="Enter category name" />
                                <ValidationMessage For="@(() => updateCategory.CategoryName)" />
                                <small class="text-muted">Required, max 40 characters</small>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="updateCategory.Description" rows="3" placeholder="Enter description (optional)" />
                                <ValidationMessage For="@(() => updateCategory.Description)" />
                                <small class="text-muted">Optional, max 500 characters</small>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <!-- Backdrop behind the modal -->
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<CategoryDTO> categories;
    private HubConnection hubConnection;
    private bool showCategoryModal = false;
    private CreateCategoryDTO newCategory = new CreateCategoryDTO();
    private UpdateCategoryDTO updateCategory = new UpdateCategoryDTO();
    private bool isNewCategory = true;
    private string errorMessage = "";
    
    // DotNetObjectReference để gọi từ JS
    private DotNetObjectReference<CategoryManagement> objRef;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync started");
            
            // Chỉ tải dữ liệu trong OnInitializedAsync, không gọi JS interop
            await LoadCategories();
            
            // Khởi tạo SignalR (không yêu cầu JS Interop)
            await SetupSignalR();
            
            Console.WriteLine("OnInitializedAsync completed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error initializing: {ex.Message}";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("OnAfterRenderAsync (firstRender) started");
                
                // Tạo đối tượng tham chiếu để JS có thể gọi đến các phương thức của component này
                objRef = DotNetObjectReference.Create(this);
                isInitialized = true;
                
                Console.WriteLine("OnAfterRenderAsync (firstRender) completed");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                errorMessage = $"Error initializing JS: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task SetupSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/categoryHub"))
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(5) })
                .Build();

            // Xử lý sự kiện khi nhận dữ liệu từ server
            hubConnection.On<CategoryDTO>("CategoryCreated", (category) => 
            {
                categories.Add(category);
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<CategoryDTO>("CategoryUpdated", (category) => 
            {
                var index = categories.FindIndex(c => c.CategoryId == category.CategoryId);
                if (index != -1)
                {
                    categories[index] = category;
                    InvokeAsync(StateHasChanged);
                }
            });

            hubConnection.On<int>("CategoryDeleted", (categoryId) => 
            {
                var category = categories.FirstOrDefault(c => c.CategoryId == categoryId);
                if (category != null)
                {
                    categories.Remove(category);
                    InvokeAsync(StateHasChanged);
                }
            });

            // Xử lý sự kiện kết nối lại
            hubConnection.Closed += async (error) =>
            {
                Console.WriteLine($"Connection closed with error: {error?.Message}");
                await Task.Delay(new Random().Next(0, 5) * 1000);
                await hubConnection.StartAsync();
            };

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up SignalR: {ex.Message}");
            // Thử kết nối lại sau 5 giây nếu gặp lỗi
            await Task.Delay(5000);
            await SetupSignalR();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var allCategories = await CategoryService.GetAllCategoriesAsync(1, 100);
            categories = Mapper.Map<List<CategoryDTO>>(allCategories);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            categories = new List<CategoryDTO>();
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private void ShowAddCategoryModal()
    {
        // Reset the properties
        newCategory = new CreateCategoryDTO
        {
            CategoryName = "",
            Description = ""
        };
        isNewCategory = true;
        errorMessage = ""; // Xóa thông báo lỗi khi mở modal mới
        showCategoryModal = true;
        StateHasChanged();
    }

    private void ShowEditCategoryModal(CategoryDTO category)
    {
        updateCategory = new UpdateCategoryDTO
        {
            CategoryId = category.CategoryId,
            CategoryName = category.CategoryName ?? "",
            Description = category.Description ?? ""
        };
        isNewCategory = false;
        errorMessage = ""; // Xóa thông báo lỗi khi mở modal chỉnh sửa
        showCategoryModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showCategoryModal = false;
        errorMessage = ""; // Clear any error messages
        StateHasChanged();
    }

    private async Task HandleValidSubmitCreate()
    {
        try
        {
            errorMessage = ""; // Xóa thông báo lỗi trước đó
            Console.WriteLine("HandleValidSubmitCreate method called");
            Console.WriteLine($"Creating category: {newCategory.CategoryName}");
            
            // Gọi trực tiếp service thay vì qua JS
            await CategoryService.AddCategoryAsync(newCategory);
            Console.WriteLine("Category added successfully");
            
            // Đóng modal
            showCategoryModal = false;
            
            // Ensure UI updates
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("Modal closed and UI updated");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving category: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error saving category: {ex.Message}";
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task HandleValidSubmitUpdate()
    {
        try
        {
            errorMessage = ""; // Xóa thông báo lỗi trước đó
            Console.WriteLine("HandleValidSubmitUpdate method called");
            Console.WriteLine($"Updating category ID {updateCategory.CategoryId}: {updateCategory.CategoryName}");
            
            // Gọi trực tiếp service thay vì qua JS
            await CategoryService.UpdateCategoryAsync(updateCategory);
            Console.WriteLine("Category updated successfully");
            
            // Đóng modal
            showCategoryModal = false;
            
            // Ensure UI updates
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("Modal closed and UI updated");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating category: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error updating category: {ex.Message}";
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        try 
        {
            Console.WriteLine($"Attempting to delete category with ID: {categoryId}");
            
            // Kiểm tra trước nếu có thể xóa không
            var canDelete = await CategoryService.CanDeleteCategoryAsync(categoryId);
            if (!canDelete)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cannot delete this category because there are products associated with it.");
                return;
            }
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category? This may affect products using this category.");
            
            Console.WriteLine($"User confirmation: {confirmed}");
            if (confirmed)
            {
                try
                {
                    Console.WriteLine($"Deleting category with ID: {categoryId}");
                    await CategoryService.DeleteCategoryAsync(categoryId);
                    Console.WriteLine($"Category with ID: {categoryId} deleted successfully");
                    // Không cần gọi LoadCategories ở đây vì SignalR sẽ cập nhật UI
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting category: {ex.Message}");
                    Console.WriteLine($"Stack trace: {ex.StackTrace}");
                    await JSRuntime.InvokeVoidAsync("alert", $"Error deleting category: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("User cancelled the delete operation");
            }
            
            // Force UI update
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Unexpected error in DeleteCategory: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred. Please try again.");
        }
    }

    private async Task TestJavaScript()
    {
        try
        {
            if (!isInitialized)
            {
                Console.WriteLine("JavaScript interop not initialized yet");
                errorMessage = "System is initializing, please try again in a moment.";
                StateHasChanged();
                return;
            }
            
            Console.WriteLine("Testing JavaScript connection...");
            await JSRuntime.InvokeVoidAsync("alert", "JavaScript connection is working!");
            Console.WriteLine("JavaScript test successful");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JavaScript test failed: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    // Được gọi từ JavaScript
    [JSInvokable]
    public async Task<bool> CreateCategoryFromJS()
    {
        try
        {
            Console.WriteLine("CreateCategoryFromJS called from JavaScript");
            
            // Server-side validation
            if (string.IsNullOrWhiteSpace(newCategory.CategoryName))
            {
                errorMessage = "Category Name is required";
                Console.WriteLine("Server validation error: Category Name is required");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            if (newCategory.CategoryName.Length > 40)
            {
                errorMessage = "Category Name cannot exceed 40 characters";
                Console.WriteLine("Server validation error: Category Name too long");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            if (newCategory.Description?.Length > 500)
            {
                errorMessage = "Description cannot exceed 500 characters";
                Console.WriteLine("Server validation error: Description too long");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            await CategoryService.AddCategoryAsync(newCategory);
            showCategoryModal = false;
            await InvokeAsync(StateHasChanged);
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CreateCategoryFromJS: {ex.Message}");
            errorMessage = $"Error creating category: {ex.Message}";
            await InvokeAsync(StateHasChanged);
            return false;
        }
    }

    [JSInvokable]
    public async Task<bool> UpdateCategoryFromJS()
    {
        try
        {
            Console.WriteLine("UpdateCategoryFromJS called from JavaScript");
            
            // Server-side validation
            if (updateCategory.CategoryId <= 0)
            {
                errorMessage = "Category ID is invalid";
                Console.WriteLine("Server validation error: Invalid Category ID");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            if (string.IsNullOrWhiteSpace(updateCategory.CategoryName))
            {
                errorMessage = "Category Name is required";
                Console.WriteLine("Server validation error: Category Name is required");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            if (updateCategory.CategoryName.Length > 40)
            {
                errorMessage = "Category Name cannot exceed 40 characters";
                Console.WriteLine("Server validation error: Category Name too long");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            if (updateCategory.Description?.Length > 500)
            {
                errorMessage = "Description cannot exceed 500 characters";
                Console.WriteLine("Server validation error: Description too long");
                await InvokeAsync(StateHasChanged);
                return false;
            }
            
            await CategoryService.UpdateCategoryAsync(updateCategory);
            showCategoryModal = false;
            await InvokeAsync(StateHasChanged);
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in UpdateCategoryFromJS: {ex.Message}");
            errorMessage = $"Error updating category: {ex.Message}";
            await InvokeAsync(StateHasChanged);
            return false;
        }
    }

    [JSInvokable]
    public async Task<bool> DeleteCategoryFromJS(int categoryId)
    {
        try
        {
            Console.WriteLine($"DeleteCategoryFromJS called from JavaScript for ID: {categoryId}");
            
            // Kiểm tra trước nếu có thể xóa không
            var canDelete = await CategoryService.CanDeleteCategoryAsync(categoryId);
            if (!canDelete)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cannot delete this category because there are products associated with it.");
                return false;
            }
            
            await CategoryService.DeleteCategoryAsync(categoryId);
            await InvokeAsync(StateHasChanged);
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteCategoryFromJS: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting category: {ex.Message}");
            return false;
        }
    }

    private async Task SaveCategoryWithJS()
    {
        try
        {
            // Kiểm tra JavaScript interop
            if (!isInitialized || objRef == null)
            {
                Console.WriteLine("JavaScript interop not initialized yet");
                errorMessage = "System is initializing, please try again in a moment.";
                StateHasChanged();
                return;
            }
            
            // Validate dữ liệu
            if (isNewCategory)
            {
                // Kiểm tra CreateCategoryDTO
                if (string.IsNullOrWhiteSpace(newCategory.CategoryName))
                {
                    errorMessage = "Category Name is required";
                    Console.WriteLine("Validation error: Category Name is required");
                    StateHasChanged();
                    return;
                }
                
                if (newCategory.CategoryName.Length > 40)
                {
                    errorMessage = "Category Name cannot exceed 40 characters";
                    Console.WriteLine("Validation error: Category Name too long");
                    StateHasChanged();
                    return;
                }
                
                if (newCategory.Description?.Length > 500)
                {
                    errorMessage = "Description cannot exceed 500 characters";
                    Console.WriteLine("Validation error: Description too long");
                    StateHasChanged();
                    return;
                }
                
                Console.WriteLine("Calling JS to create category");
                await JSRuntime.InvokeVoidAsync("categoryOperations.createCategory", objRef);
            }
            else
            {
                // Kiểm tra UpdateCategoryDTO
                if (updateCategory.CategoryId <= 0)
                {
                    errorMessage = "Category ID is invalid";
                    Console.WriteLine("Validation error: Invalid Category ID");
                    StateHasChanged();
                    return;
                }
                
                if (string.IsNullOrWhiteSpace(updateCategory.CategoryName))
                {
                    errorMessage = "Category Name is required";
                    Console.WriteLine("Validation error: Category Name is required");
                    StateHasChanged();
                    return;
                }
                
                if (updateCategory.CategoryName.Length > 40)
                {
                    errorMessage = "Category Name cannot exceed 40 characters";
                    Console.WriteLine("Validation error: Category Name too long");
                    StateHasChanged();
                    return;
                }
                
                if (updateCategory.Description?.Length > 500)
                {
                    errorMessage = "Description cannot exceed 500 characters";
                    Console.WriteLine("Validation error: Description too long");
                    StateHasChanged();
                    return;
                }
                
                Console.WriteLine("Calling JS to update category");
                await JSRuntime.InvokeVoidAsync("categoryOperations.updateCategory", objRef);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling JS for save: {ex.Message}");
            errorMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task DeleteCategoryWithJS(int categoryId)
    {
        try
        {
            if (!isInitialized || objRef == null)
            {
                Console.WriteLine("JavaScript interop not initialized yet");
                await JSRuntime.InvokeVoidAsync("alert", "System is initializing, please try again in a moment.");
                return;
            }
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
            if (confirmed)
            {
                Console.WriteLine($"Calling JS to delete category ID: {categoryId}");
                await JSRuntime.InvokeVoidAsync("categoryOperations.deleteCategory", objRef, categoryId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error calling JS for delete: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    // Xử lý IDisposable
    public void Dispose()
    {
        objRef?.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
        
        objRef?.Dispose();
    }
} 
