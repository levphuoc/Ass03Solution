@page "/orders/create"

@rendermode InteractiveServer

@using BLL.DTOs
@using BLL.Services
@using BLL.Services.IServices
@inject IOrderService OrderService
@inject IProductService ProductService
@inject ICartService CartService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject IOrderDetailService OrderDetailService
@inject IHttpContextAccessor HttpContextAccessor
<h3 class="text-primary mb-4"><i class="fas fa-file-alt"></i> Create New Order</h3>
@if (ErrorMessage is not null)
{
    <div class="alert alert-danger mt-4 text-center">
        @ErrorMessage
    </div>
}

@if (IsSuccess)
{
    <div class="alert alert-success mt-4 text-center">
        <i class="fas fa-check-circle me-2"></i> Order Created Successfully! Product inventory has been updated.
    </div>
}
<div class="card shadow-sm p-4 mb-4">
    <div class="card-header bg-primary text-white">
        <h3 class="mb-0"><i class="fas fa-file-alt"></i> Create New Order</h3>
    </div>
    <div class="card-body">

        <div class="row g-3 mb-3">

            <div class="col-md-6">

                <label class="form-label fw-bold">Freight</label>

                <InputNumber @bind-Value="OrderModel.Freight" class="form-control" min="1" max="10000" />

                @if (OrderModel.Freight < 0)

                {

                    <div class="text-danger">Freight cannot be negative.</div>

                }

            </div>

            <div class="col-md-6">

                <label class="form-label fw-bold">Order Date</label>

                <InputDate @bind-Value="OrderModel.OrderDate" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" disabled />


            </div>

        </div>

        <div class="row g-3 mb-3">
            <div class="col-md-6">

                <label class="form-label fw-bold">Required Date</label>

                <InputDate @bind-Value="OrderModel.RequiredDate" class="form-control" min="@OrderModel.OrderDate.ToString("yyyy-MM-dd")" @onchange="OnRequiredDateChanged" />

            </div>

            <div class="col-md-6">

                <label class="form-label fw-bold">Shipped Date</label>

                <InputDate @bind-Value="OrderModel.ShippedDate" class="form-control" min="@OrderModel.RequiredDate.ToString("yyyy-MM-dd")" />

            </div>
        </div>

        <h4 class="mt-4 mb-3 text-primary"><i class="fas fa-box"></i> Order Items</h4>

        <div class="table-responsive mb-4">
            <table class="table table-bordered table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th style="width: 40%;">Product</th>
                        <th style="width: 20%;">Quantity</th>
                        <th style="width: 20%;">Unit Price</th>
                        <th style="width: 20%;">Total Product</th>
                        
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in OrderItems)
                    {
                        <tr>
                            <td>
                                <!-- Tên sản phẩm cố định -->
                                <input type="text" class="form-control" @bind="item.ProductName" readonly />
                            </td>
                            <td>
                                <!-- Quantity (số lượng) có thể chỉnh sửa -->
                                <input type="number" class="form-control" @bind="item.Quantity" placeholder="Qty" min="1" readonly />
                            </td>
                            <td>
                                <!-- Unit Price (giá đơn vị) là readonly, không chỉnh sửa được -->
                                <input type="number" class="form-control" @bind="item.UnitPrice" placeholder="Unit Price" readonly />
                            </td>
                            <td>
                                <!-- Total Item (Tổng tiền cho item) có thể chỉnh sửa -->
                                <input type="number" class="form-control" @bind="item.TotalItem" placeholder="Total Item" min="1" readonly />
                            </td>
                           
                        </tr>
                    }

                </tbody>
            </table>
        </div>

        <div class="mt-4 d-flex justify-content-end">
            <h4 class="text-primary">Total: <strong>@total.ToString("C")</strong></h4>
        </div>

        <div class="d-grid">
            <button class="btn btn-primary btn-lg" @onclick="CreateOrder" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <i class="fas fa-check">Checkout</i>
                }
            </button>
        </div>
    </div>

</div>




@code {
    private List<OrderItemDTO> OrderItems { get; set; } = new List<OrderItemDTO>();

    private OrderDTO OrderModel { get; set; } = new OrderDTO
    {
        MemberId = 0,
        OrderDate = DateTime.Today,
        RequiredDate = DateTime.Today.AddDays(7),
        ShippedDate = DateTime.Today.AddDays(3),
        Freight = 1m
    };

    private List<ProductSelectModel> products = new();



    private void RemoveOrderItem(OrderItemDTO item)
    {
        OrderItems.Remove(item);
    }

    private bool IsLoading = false;
    private bool IsSuccess = false;
    private string? ErrorMessage = null;
    private HubConnection? hubConnection;
    private double total = 0;
    protected override async Task OnInitializedAsync()
    {
        // Get the current user ID from claims
        var idString = HttpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(idString) && int.TryParse(idString, out int userId))
        {
            OrderModel.MemberId = userId;
        }

        hubConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
         .WithAutomaticReconnect()
         .Build();

        hubConnection.On<int>("OrderCreated", (orderId) =>
        {

            Console.WriteLine($"Order {orderId} created successfully.");
            InvokeAsync(() => StateHasChanged());
        });

        await hubConnection.StartAsync();
        products = await ProductService.GetProductsAsync();  
        AddOrderItem();
    }
    private async void AddOrderItem()
    {
        // Lấy email user hiện tại
        var idString = HttpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Chuyển từ string sang int
        if (string.IsNullOrEmpty(idString) || !int.TryParse(idString, out int userId))
        {
            ErrorMessage = "User ID không hợp lệ hoặc không tìm thấy.";
            return;
        }

        // Lấy thông tin giỏ hàng
        var cartItems = await CartService.GetCartItemsAsync(userId);

        if (cartItems != null && cartItems.Any())
        {
            foreach (var cartItem in cartItems)
            {
                OrderItems.Add(new OrderItemDTO
                    {
                        ProductId = cartItem.ProductId,
                        ProductName = cartItem.Product.ProductName,
                        Quantity = cartItem.Quantity,
                        UnitPrice = cartItem.Product.UnitPrice,
                        TotalItem = (float)cartItem.TotalPrice,
                    });

                total += (double)cartItem.TotalPrice;
            }
            InvokeAsync(() => StateHasChanged());
        }
        else
        {
            ErrorMessage = "Không có item nào trong giỏ hàng.";
        }
    }

    private void OnProductChanged(ChangeEventArgs e, OrderItemDTO item)
    {
        if (int.TryParse(e.Value?.ToString(), out int productId))
        {
            item.ProductId = productId;

            var selectedProduct = products.FirstOrDefault(p => p.ProductId == productId);

            if (selectedProduct != null)
            {
                item.UnitPrice = selectedProduct.UnitPrice;
            }
        }
    }

    private void OnRequiredDateChanged(ChangeEventArgs e)
    {
        // When Required Date changes, ensure Shipped Date is not earlier
        if (OrderModel.ShippedDate < OrderModel.RequiredDate)
        {
            OrderModel.ShippedDate = OrderModel.RequiredDate;
        }
        StateHasChanged();
    }

    private async Task CreateOrder()
    {
            IsLoading = true;
            ErrorMessage = null;
        if (OrderItems == null || !OrderItems.Any())
        {
            ErrorMessage = "You haven't added any products to the order.";
            IsLoading = false;
            return;
        }

        if (OrderModel.Freight < 1 || OrderModel.Freight > 10000)
        {
            ErrorMessage = "Freight must be between 1 and 10,000.";
            IsLoading = false;
            return;
        }

        // Validate that Shipped Date is greater than or equal to Required Date
        if (OrderModel.ShippedDate < OrderModel.RequiredDate)
        {
            ErrorMessage = "Shipped Date must be greater than or equal to Required Date.";
            IsLoading = false;
            return;
        }

        foreach (var item in OrderItems)
        {
            var isAvailable = await ProductService.CheckStockAvailabilityAsync(item.ProductId, item.Quantity);

            if (!isAvailable)
            {
                ErrorMessage = $"Product '{item.ProductName}' không đủ số lượng tồn kho.";
                IsLoading = false;
                return;
            }
        }
            
           
            var createdOrderId = await OrderService.CreateOrderAsync(OrderModel);

            if (createdOrderId <= 0)
            {
                ErrorMessage = "Failed to create the order.";
                return;
            }

            foreach (var item in OrderItems)
            {
                item.OrderId = createdOrderId;
            }
            var orderDetails = OrderItems.Select(item => new OrderItemDTO
                {
                    OrderId = createdOrderId,
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice,
                    Discount = item.Discount

                }).ToList();
            
            // Add order details and decrease product stock
            await OrderDetailService.AddOrderDetailsAsync(orderDetails);
            Console.WriteLine($"Order details added and product stock decreased for order {createdOrderId}");
            
            // Xóa giỏ hàng sau khi tạo đơn hàng thành công
            var idString = HttpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(idString, out int userId)) 
            {
                try
                {
                    // Call the ultimate cart cleanup function that makes multiple deletion attempts
                    await JSRuntime.InvokeVoidAsync("ultimateCartCleanup", userId);
                    Console.WriteLine($"Ultimate cart cleanup initiated for user {userId}");
                    
                    // Standard service approach as backup
                    await CartService.DeleteCartAfterOrderCreateAsync(userId);
                    Console.WriteLine($"Standard cart deletion also initiated for user {userId}");
                    
                    // Delay to let cleanup happen before redirecting
                    await Task.Delay(1000);
                }
                catch (Exception ex)
                {
                    // Log but don't fail the order creation
                    Console.WriteLine($"Error during cart deletion after order: {ex.Message}");
                }
            }
            
            IsSuccess = true;
            await hubConnection.InvokeAsync("NotifyOrderCreation", createdOrderId);
            await InvokeAsync(() => NavigationManager.NavigateTo("/orders"));

    }
}
