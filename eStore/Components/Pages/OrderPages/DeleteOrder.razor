@page "/orders/delete"
@rendermode InteractiveServer
@using BLL.DTOs
@using BLL.Services.IServices
@using Microsoft.AspNetCore.SignalR.Client
@inject IOrderService OrderService
@inject IOrderDetailService OrderDetailService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Delete Order</PageTitle>

<h3 class="text-danger mb-4"><i class="fas fa-trash-alt"></i> Delete Order</h3>

@if (ErrorMessage is not null)
{
    <div class="alert alert-danger mt-4 text-center">
        <strong>Error:</strong> @ErrorMessage
    </div>
}

@if (IsSuccess)
{
    <div class="alert alert-success mt-4 text-center">
        Order Deleted Successfully!
    </div>
}

<div class="card shadow-sm p-4 mb-4">
    @if (OrderModel == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            <dl class="row">
                <dt class="col-sm-3">Order ID</dt>
                <dd class="col-sm-9">@OrderModel.OrderId</dd>

                <dt class="col-sm-3">Freight</dt>
                <dd class="col-sm-9">@OrderModel.Freight</dd>

                <dt class="col-sm-3">Order Date</dt>
                <dd class="col-sm-9">@OrderModel.OrderDate.ToShortDateString()</dd>

                <dt class="col-sm-3">Required Date</dt>
                <dd class="col-sm-9">@OrderModel.RequiredDate.ToShortDateString()</dd>

              <dt class="col-sm-3">Shipped Date</dt>
                <dd class="col-sm-9">@((OrderModel.ShippedDate?.ToShortDateString()) ?? "Not Applicable")</dd>


            </dl>

            <div class="d-flex justify-content-between">
                <button class="btn btn-danger" @onclick="DeleteOrderById" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <i class="fas fa-trash-alt me-2">Delete Order</i>
                      
                    }
                </button>

                <a href="/orders" class="btn btn-secondary">Back to List</a>
            </div>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    public int orderid { get; set; }  // ID lấy từ URL

    private OrderDTO OrderModel { get; set; } = new();
    private bool IsLoading = false;
    private bool IsSuccess = false;
    private string? ErrorMessage;
    private HubConnection? hubConnection;
   
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            IsLoading = true;


            hubConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
         .WithAutomaticReconnect()
         .Build();

            hubConnection.On<int>("OrderCreated", (orderId) =>
            {

                Console.WriteLine($"Order {orderId} created successfully.");
                InvokeAsync(() => StateHasChanged());
            });

            await hubConnection.StartAsync();
           
            OrderModel = await OrderService.GetOrderByIdAsync(orderid);

            if (OrderModel == null)
            {
                ErrorMessage = "Order not found.";
            }
            else
            {
                IsSuccess = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

   
    private async Task DeleteOrderById()
    {
        // Show confirmation dialog
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");

        if (confirmed)
        {
            IsLoading = true;
            try
            {
                // Log action for debugging
                await JSRuntime.InvokeVoidAsync("console.log", "Deleted clicked");

                // Delete order items
                await OrderDetailService.DeleteOrderItemsByOrderIdAsync(orderid);

                // Delete the order
                await OrderService.CancelOrderAsync(orderid);
                await hubConnection.InvokeAsync("NotifyOrderCreation", orderid);
                // Success message
                IsSuccess = true;

                // Navigate back to the orders list
                await InvokeAsync(() => NavigationManager.NavigateTo("/orders"));
            }
            catch (Exception ex)
            {
                ErrorMessage = $"An error occurred while deleting the order: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
            }
        }
        else
        {
            // If the user cancels, no action is performed
            await JSRuntime.InvokeVoidAsync("console.log", "Order deletion canceled.");
        }
    }

}
