@page "/orders"
@rendermode InteractiveServer

@using BLL.Services
@using BLL.Services.IServices
@using DataAccessLayer.Entities
@using Microsoft.AspNetCore.SignalR.Client
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Orders Dashboard</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-primary">📦 Orders Dashboard</h1>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-info text-white shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Total Orders</h5>
                    <h2>@totalOrders</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4 d-flex align-items-end justify-content-end">
            <NavLink class="btn btn-primary btn-lg" href="/orders/create">+ Create New Order</NavLink>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="mb-0">Order List</h5>
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Member ID</th>
                        <th>Order Date</th>
                        <th>Required Date</th>
                        <th>Shipped Date</th>
                        <th>Freight</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.MemberId</td>
                            <td>@order.OrderDate.ToShortDateString()</td>
                            <td>@(order.RequiredDate?.ToShortDateString() ?? "N/A")</td>
                            <td>@(order.ShippedDate?.ToShortDateString() ?? "N/A")</td>
                            <td>@order.Freight</td>
                            <td>
                                <div class="d-flex gap-2 justify-content-center">
                                    <!-- Edit Button -->
                                    <NavLink class="btn btn-sm btn-outline-primary me-1" href="@($"orders/edit?orderid={order.OrderId}")">
                                        Edit
                                    </NavLink>

                                    <!-- Details Button -->
                                    <NavLink class="btn btn-sm btn-outline-secondary me-1" href="@($"orders/details?orderid={order.OrderId}")">
                                        Details
                                    </NavLink>

                                    <!-- Delete Button -->
                                    <NavLink class="btn btn-sm btn-outline-danger" href="@($"orders/delete?orderid={order.OrderId}")">
                                        Delete
                                    </NavLink>
                                </div>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>

            <nav>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage">❮</button>
                    </li>

                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                        </li>
                    }

                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="NextPage">❯</button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    private List<Order> orders = new();
    private int totalOrders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int totalPages;
    private bool isRendered = false;
    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Kết nối đến SignalR Hub
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
                .WithAutomaticReconnect()
                .Build();

            // Lắng nghe sự kiện OrderCreated
            hubConnection.On<int>("OrderCreated", async (orderId) =>
            {
                Console.WriteLine($"Order {orderId} created successfully.");
                await LoadOrdersAsync(currentPage);
                totalOrders = await OrderService.GetTotalOrdersAsync(); 
                await InvokeAsync(StateHasChanged); 
            });
            hubConnection.On<int>("SpecificOrderUpdated", async (orderId) =>
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"📡 Received update notification for Order ID {orderId}");

            Console.WriteLine($"Order {orderId} update successfully.");
            Console.WriteLine($"Orderhsdfsdfsdfsdfs");
            //await LoadOrdersUpdateAsync(orderId); 
           
            await LoadOrdersAsync(currentPage); 
            totalOrders = await OrderService.GetTotalOrdersAsync();
            await InvokeAsync(StateHasChanged);
        });

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");  

            // Tải tổng số đơn hàng và tính số trang
            totalOrders = await OrderService.GetTotalOrdersAsync();
            totalPages = (int)Math.Ceiling(totalOrders / (decimal)pageSize);
            await LoadOrdersAsync(currentPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error establishing SignalR connection: {ex.Message}");  
        }
    }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isRendered = true;
            await JSRuntime.InvokeVoidAsync("console.log", "Component Rendered Successfully!");
        }
    }
    private async Task LoadOrdersUpdateAsync(int orderId)
    {
        var updatedOrder = await OrderService.GetOrderByIdAsync(orderId);

        var orderToUpdate = orders.FirstOrDefault(o => o.OrderId == orderId);

        if (orderToUpdate != null && updatedOrder != null)
        {
            // Update the fields of the order
            orderToUpdate.Freight = updatedOrder.Freight;
            orderToUpdate.OrderDate = updatedOrder.OrderDate;
            orderToUpdate.RequiredDate = updatedOrder.RequiredDate;
            orderToUpdate.ShippedDate = updatedOrder.ShippedDate;
            orderToUpdate.MemberId = updatedOrder.MemberId;

            Console.WriteLine($"Updated Order ID {orderId}: Freight updated to {updatedOrder.Freight}");
        }
        else
        {
            Console.WriteLine($"Order {orderId} not found in the current list.");
        }

        // Refresh the list and trigger the UI update
        orders = await OrderService.GetPagedOrdersAsync(currentPage, pageSize);
        await InvokeAsync(StateHasChanged);  // Ensure the UI updates
    }







    private async Task LoadOrdersAsync(int pageNumber)
    {
        orders = await OrderService.GetPagedOrdersAsync(pageNumber, pageSize);
        currentPage = pageNumber;

        if (isRendered)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded Page {pageNumber}");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadOrdersAsync(currentPage);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadOrdersAsync(currentPage);
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            await LoadOrdersAsync(pageNumber);
        }
    }
}
