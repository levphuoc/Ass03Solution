@page "/orders"
@rendermode InteractiveServer
@using BLL.Services
@using BLL.Services.IServices
@using DataAccessLayer.Entities
@using Microsoft.AspNetCore.SignalR.Client
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Orders Dashboard</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-primary">📦 Orders Dashboard</h1>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card bg-info text-white shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Total Orders</h5>
                    <h2>@totalOrders</h2>
                </div>

            </div>

            
        </div>
       

        <div class="col-md-4 d-flex align-items-end justify-content-end">
            <NavLink class="btn btn-primary btn-lg" href="/orders/create">+ Create New Order</NavLink>
        </div>
    </div>
    <div class="col-md-4">
    <div class="card bg-light text-dark shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Order Status</h5>
                <select class="form-select" @onchange="OnStatusChanged">
                    <option value="ALL">All</option>
                    <option value="spending">Spending</option>
                    <option value="approve">Approve</option>
                    <option value="reject">Reject</option>
                    <option value="shipping">Shipping</option>
                    <option value="shipped">Shipped</option>
                </select>



        </div>
    </div>
</div>


    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="mb-0">Order List</h5>
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        
                        <th>Order Date</th>
                        <th>Required Date</th>
                        <th>Shipped Date</th>
                        <th>Freight</th>
                        <th>Status</th>
                        <th>Actions</th>
                        <th>Next Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            
                            <td>@order.OrderDate.ToShortDateString()</td>
                            <td>@(order.RequiredDate?.ToShortDateString() ?? "N/A")</td>
                            <td>@(order.ShippedDate?.ToShortDateString() ?? "N/A")</td>
                            <td>@((decimal)order.Freight % 1 == 0 ? ((decimal)order.Freight).ToString("0") : ((decimal)order.Freight).ToString("0.##")) kg</td>

                            <td>
                                @switch (order.Status)
                                {
                                    case DataAccessLayer.Enum.OrderStatus.Spending:
                                        <span class="badge bg-warning">@order.Status.ToString().ToUpper()</span> <!-- Màu vàng cho Spending -->
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Approve:
                                        <span class="badge bg-success">@order.Status.ToString().ToUpper()</span> <!-- Màu xanh lá cho Approve -->
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Reject:
                                        <span class="badge bg-danger">@order.Status.ToString().ToUpper()</span> <!-- Màu đỏ cho Reject -->
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Shipping:
                                        <span class="badge bg-info">@order.Status.ToString().ToUpper()</span> <!-- Màu xanh nước biển nhạt cho Shipping -->
                                        break;
                                    case DataAccessLayer.Enum.OrderStatus.Shipped:
                                        <span class="badge bg-primary">@order.Status.ToString().ToUpper()</span> <!-- Màu xanh dương cho Shipped -->
                                        break;
                                    default:
                                        <span class="badge bg-secondary">@order.Status.ToString().ToUpper()</span> <!-- Màu xám cho trạng thái không xác định -->
                                        break;
                                }
                            </td>


                            <td>
                                <div class="d-flex gap-2 justify-content-center">
                                    <NavLink class="btn btn-sm btn-outline-primary me-1" href="@($"orders/edit?orderid={order.OrderId}")">Edit</NavLink>
                                    <NavLink class="btn btn-sm btn-outline-secondary me-1" href="@($"orders/details?orderid={order.OrderId}")">Details</NavLink>
                                    <NavLink class="btn btn-sm btn-outline-danger" href="@($"orders/delete?orderid={order.OrderId}")">Delete</NavLink>
                                </div>
                            </td>

                            <!-- Cột mới dành cho thay đổi trạng thái đơn hàng -->
                            <td>
                                <div class="d-flex gap-2 justify-content-center">
                                    <!-- Approve Button -->
                                    @if (order.Status == DataAccessLayer.Enum.OrderStatus.Spending)
                                    {
                                        <button class="btn btn-sm btn-outline-success me-1" @onclick="() => ApproveOrder(order.OrderId)">Approve</button>
                                        <button class="btn btn-sm btn-outline-danger me-1" @onclick="() => RejectOrder(order.OrderId)">Reject</button>
                                    }

                                    <!-- Shipping Button -->
                                    @if (order.Status == DataAccessLayer.Enum.OrderStatus.Approve)
                                    {
                                        <button class="btn btn-sm btn-outline-warning me-1" @onclick="() => ShippingOrder(order.OrderId)">Shipping</button>
                                    }

                                    <!-- Shipped Button -->
                                    @if (order.Status == DataAccessLayer.Enum.OrderStatus.Shipping)
                                    {
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ShippedOrder(order.OrderId)">Shipped</button>
                                    }
                                </div>
                            </td>



                        </tr>
                    }
                </tbody>
            </table>
            <nav>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage">❮</button>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="NextPage">❯</button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    private List<Order> orders = new();
    private int totalOrders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int totalPages;
    private HubConnection? hubConnection;
    private string selectedStatus = "ALL";
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int>("OrderCreated", async (orderId) => await RefreshOrders());
        hubConnection.On<Order>("OrderUpdated", async (updatedOrder) =>
    {
    Console.WriteLine($"Order {updatedOrder.OrderId} updated.");

    
    orders = orders.Select(o => o.OrderId == updatedOrder.OrderId ? updatedOrder : o).ToList();

    await InvokeAsync(StateHasChanged);
    });

        await hubConnection.StartAsync();
        Console.WriteLine("SignalR connection established.");

        await RefreshOrders();
    }
    private async Task ApproveOrder(int orderId)
    {
        await OrderService.ApproveOrderAsync(orderId);
        await RefreshOrders();  // Lấy lại danh sách đơn hàng sau khi thay đổi trạng thái
    }

    private async Task RejectOrder(int orderId)
    {
        await OrderService.RejectOrderAsync(orderId);
        await RefreshOrders();  // Lấy lại danh sách đơn hàng sau khi thay đổi trạng thái
    }

    private async Task ShippingOrder(int orderId)
    {
        await OrderService.ShippingOrderAsync(orderId);
        await RefreshOrders();  // Lấy lại danh sách đơn hàng sau khi thay đổi trạng thái
    }

    private async Task ShippedOrder(int orderId)
    {
        await OrderService.ShippedOrderAsync(orderId);
        await RefreshOrders();  // Lấy lại danh sách đơn hàng sau khi thay đổi trạng thái
    }



    private async Task RefreshOrders()
    {
        Console.WriteLine("RefreshPage");
        totalOrders = await OrderService.GetTotalOrdersAsync();
        totalPages = (int)Math.Ceiling(totalOrders / (decimal)pageSize);
        await LoadOrdersAsync(currentPage);
    }
    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString(); 
        orders = await OrderService.GetPagedOrdersAsync(currentPage, pageSize, selectedStatus);
        currentPage = 1;  
        await LoadOrdersAsync(currentPage);  
    }

    private async Task LoadOrdersAsync(int pageNumber)
    {
        Console.WriteLine("Updated");
        Console.WriteLine(selectedStatus);
        orders = await OrderService.GetPagedOrdersAsync(pageNumber, pageSize, selectedStatus);
        currentPage = pageNumber;
        await InvokeAsync(StateHasChanged);
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadOrdersAsync(currentPage);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadOrdersAsync(currentPage);
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            await LoadOrdersAsync(pageNumber);
        }
    }
   
}
