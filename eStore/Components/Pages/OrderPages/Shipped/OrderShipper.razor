@page "/ordersShipper"
@rendermode InteractiveServer
@using BLL.Services
@using BLL.Services.IServices
@using DataAccessLayer.Entities
@using DataAccessLayer.Enum
@using Microsoft.AspNetCore.SignalR.Client
@inject IOrderService OrderService
@inject IAuthService AuthService 
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Orders Dashboard</PageTitle>

@if (currentUser == null)
{
    <div class="alert alert-warning">
        <p>You need to log in to access this page.</p>
        <button class="btn btn-primary" @onclick="RedirectToLogin">Go to Login</button>
    </div>
}
else if (!isDeliverer)
{
    <div class="alert alert-danger">
        <p>You don't have permission to access this page. Only Deliverers can access this page.</p>
    </div>
}
else
{
    <div class="container mt-4">
        <h1 class="mb-4 text-primary">📦 Deliverer Orders</h1>

        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card bg-info text-white shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Total Orders</h5>
                        <h2>@totalOrders</h2>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card bg-light text-dark shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Order Status</h5>
                        <select class="form-select" @onchange="OnStatusChanged">
                            <option value="ALL">All</option>
                            <option value="3">Approve</option>
                            <option value="4">Shipping</option>
                            <option value="5">Shipped</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="mb-0">Order List</h5>
            </div>
            <div class="card-body">
                @if (orders.Count == 0)
                {
                    <div class="alert alert-info">
                        <p>No orders found with the selected criteria.</p>
                    </div>
                }
                else
                {
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>OrderId</th>
                                <th>Order Date</th>
                                <th>Required Date</th>
                                <th>Shipped Date</th>
                                <th>Freight</th>
                                <th>Status</th>
                                <th>Actions</th>
                                <th>Next Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in orders)
                            {
                                <tr>
                                    <td>#@order.OrderId</td>
                                    <td>@order.OrderDate.ToShortDateString()</td>
                                    <td>@(order.RequiredDate?.ToShortDateString() ?? "N/A")</td>
                                    <td>@(order.ShippedDate?.ToShortDateString() ?? "N/A")</td>
                                    <td>@((decimal)order.Freight % 1 == 0 ? ((decimal)order.Freight).ToString("0") : ((decimal)order.Freight).ToString("0.##")) kg</td>

                                    <td>
                                        @switch (order.Status)
                                        {
                                            case DataAccessLayer.Enum.OrderStatus.Spending:
                                                <span class="badge bg-warning">@order.Status.ToString().ToUpper()</span>
                                                break;
                                            case DataAccessLayer.Enum.OrderStatus.Approve:
                                                <span class="badge bg-success">@order.Status.ToString().ToUpper()</span>
                                                break;
                                            case DataAccessLayer.Enum.OrderStatus.Reject:
                                                <span class="badge bg-danger">@order.Status.ToString().ToUpper()</span>
                                                break;
                                            case DataAccessLayer.Enum.OrderStatus.Shipping:
                                                <span class="badge bg-info">@order.Status.ToString().ToUpper()</span>
                                                break;
                                            case DataAccessLayer.Enum.OrderStatus.Shipped:
                                                <span class="badge bg-primary">@order.Status.ToString().ToUpper()</span>
                                                break;
                                            default:
                                                <span class="badge bg-secondary">@order.Status.ToString().ToUpper()</span>
                                                break;
                                        }
                                    </td>


                                    <td>
                                        <div class="d-flex gap-2 justify-content-center">
                                            <NavLink class="btn btn-sm btn-outline-secondary me-1" href="@($"orders/details?orderid={order.OrderId}")">Details</NavLink>
                                        </div>
                                    </td>

                                    <td>
                                        <div class="d-flex gap-2 justify-content-center">
                                            @if (order.Status == DataAccessLayer.Enum.OrderStatus.Approve)
                                            {
                                                <button class="btn btn-sm btn-outline-warning me-1" @onclick="() => ShippingOrder(order.OrderId)">Shipping</button>
                                            }

                                            @if (order.Status == DataAccessLayer.Enum.OrderStatus.Shipping)
                                            {
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShippedOrder(order.OrderId)">Shipped</button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <nav>
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="PreviousPage">❮</button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="NextPage">❯</button>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Order> orders = new();
    private int totalOrders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int totalPages;
    private HubConnection? hubConnection;
    private string selectedStatus = "ALL";
    private Member? currentUser;
    private bool isDeliverer = false;
    
    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            return;
        }
        
        isDeliverer = AuthService.IsInRole("Deliverer");
        if (!isDeliverer)
        {
            return;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int>("OrderCreated", async (orderId) => await RefreshOrders());
        hubConnection.On<Order>("OrderUpdated", async (updatedOrder) =>
        {
            orders = orders.Select(o => o.OrderId == updatedOrder.OrderId ? updatedOrder : o).ToList();
            await InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<int, string>("ReceiveStatusChange", async (orderId, newStatus) =>
        {
            var order = orders.FirstOrDefault(o => o.OrderId == orderId);
            if (order != null && Enum.TryParse<OrderStatus>(newStatus, out var updatedStatus))
            {
                order.Status = updatedStatus;
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        Console.WriteLine("SignalR connection established.");

        await RefreshOrders();
    }

    private async Task ShippingOrder(int orderId)
    {
        await OrderService.ShippingOrderAsync(orderId);
        await RefreshOrders();
    }

    private async Task ShippedOrder(int orderId)
    {
        await OrderService.ShippedOrderAsync(orderId);
        await RefreshOrders();
    }
    
    private async Task RefreshOrders()
    {
        if (!isDeliverer)
        {
            return;
        }
        
        var countResult = await OrderService.GetPagedOrdersShipperAsync(1, int.MaxValue, "ALL");
        totalOrders = countResult.Count;
        totalPages = (int)Math.Ceiling(totalOrders / (decimal)pageSize);
        await LoadOrdersAsync(currentPage);
    }
    
    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        currentPage = 1;
        
        Console.WriteLine($"Status changed to: {selectedStatus}");
        
        await LoadOrdersAsync(currentPage);
    }

    private async Task LoadOrdersAsync(int pageNumber)
    {
        if (!isDeliverer)
        {
            return;
        }
        
        Console.WriteLine($"LoadOrdersAsync: Loading orders with status: {selectedStatus}, page: {pageNumber}");
        
        try 
        {
            // Debug: kiểm tra giá trị enum
            Console.WriteLine($"OrderStatus.Approve value: {OrderStatus.Approve}");
            
            // Nếu chọn All, truyền "ALL", nếu không thì truyền giá trị số đã chọn
            string statusFilter = selectedStatus.Equals("ALL", StringComparison.OrdinalIgnoreCase) 
                ? "ALL" 
                : selectedStatus;
                
            Console.WriteLine($"Using status filter: {statusFilter}");
            
            orders = await OrderService.GetPagedOrdersShipperAsync(pageNumber, pageSize, statusFilter);
            
            Console.WriteLine($"Loaded {orders.Count} orders");
            
            // Lấy tổng số đơn hàng theo trạng thái đã chọn
            var countResult = await OrderService.GetPagedOrdersShipperAsync(1, int.MaxValue, statusFilter);
            totalOrders = countResult.Count;
            Console.WriteLine($"Total orders for status {statusFilter}: {totalOrders}");
            
            // Kiểm tra nếu không có đơn hàng hoặc đang ở trang không hợp lệ
            if (totalOrders == 0)
            {
                orders = new List<Order>();
                totalPages = 1;
                currentPage = 1;
            }
            else
            {
                totalPages = Math.Max(1, (int)Math.Ceiling(totalOrders / (decimal)pageSize));
                if (pageNumber > totalPages)
                {
                    currentPage = 1;
                    await LoadOrdersAsync(1);
                    return;
                }
                currentPage = pageNumber;
            }
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadOrdersAsync(currentPage);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadOrdersAsync(currentPage);
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            await LoadOrdersAsync(pageNumber);
        }
    }
    
    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
