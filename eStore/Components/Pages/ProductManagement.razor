@page "/products"
@rendermode InteractiveServer
@using DataAccessLayer.Entities
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using BLL.DTOs
@using BLL.Services.IServices
@using BLL.Services
@using AutoMapper
@implements IAsyncDisposable
@attribute [Authorize(Policy = "RequireAdmin")]
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IAuthService AuthService
@inject IMapper Mapper
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Product Management</h3>
<div class="mb-3">
    <span class="badge bg-info">Your role: @currentUser?.Role</span>
</div>

<div class="row mb-4">
    <div class="col">
        <button class="btn btn-success" @onclick="ShowAddProductModal">Add New Product</button>
    </div>
</div>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Category</th>
                    <th>Weight</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Image</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.ProductId</td>
                        <td>@product.ProductName</td>
                        <td>
                            @{
                                var categoryName = categories?.FirstOrDefault(c => c.CategoryId == product.CategoryId)?.CategoryName ?? "Unknown";
                            }
                            @categoryName
                        </td>
                        <td>@product.Weight</td>
                        <td>@($"{product.UnitPrice:C}")</td>
                        <td>@product.UnitsInStock</td>
                        <td>
                            @if (!string.IsNullOrEmpty(product.UrlImage))
                            {
                                <img src="@GetProxyImageUrl(product.UrlImage)" alt="@product.ProductName" style="max-width: 50px; max-height: 50px;" onerror="this.onerror=null; this.src='images/no-image.png';" />
                            }
                            else
                            {
                                <span>No image</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowEditProductModal(product)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Add/Edit Product Modal -->
@if (showProductModal)
{
    <div class="modal show" style="display: block; background-color: rgba(0,0,0,0.4);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isNewProduct ? "Add Product" : "Edit Product")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <strong>Error:</strong> @errorMessage
                        </div>
                    }
                    
                    @if (isNewProduct)
                    {
                        <EditForm Model="newProduct" OnValidSubmit="HandleValidSubmitCreate">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <InputText id="productName" class="form-control" @bind-Value="newProduct.ProductName" placeholder="Enter product name" />
                                <ValidationMessage For="@(() => newProduct.ProductName)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Category <span class="text-danger">*</span></label>
                                <InputSelect id="categoryId" class="form-control" @bind-Value="newProduct.CategoryId">
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newProduct.CategoryId)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="weight" class="form-label">Weight</label>
                                <InputText id="weight" class="form-control" @bind-Value="newProduct.Weight" placeholder="Enter weight (e.g., 500g)" />
                                <ValidationMessage For="@(() => newProduct.Weight)" />
                                <small class="text-muted">Enter a positive number followed by optional unit (e.g., 500g)</small>
                            </div>

                            <div class="mb-3">
                                <label for="unitPrice" class="form-label">Unit Price <span class="text-danger">*</span></label>
                                <InputNumber id="unitPrice" class="form-control" @bind-Value="newProduct.UnitPrice" />
                                <ValidationMessage For="@(() => newProduct.UnitPrice)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="unitsInStock" class="form-label">Units In Stock <span class="text-danger">*</span></label>
                                <InputNumber id="unitsInStock" class="form-control" @bind-Value="newProduct.UnitsInStock" />
                                <ValidationMessage For="@(() => newProduct.UnitsInStock)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="urlImage" class="form-label">Image URL</label>
                                <InputText id="urlImage" class="form-control" @bind-Value="newProduct.UrlImage" placeholder="Enter URL to product image" @onblur="ValidateImageUrl" />
                                <ValidationMessage For="@(() => newProduct.UrlImage)" />
                                <div class="mt-2">
                                    @if (!string.IsNullOrEmpty(newProduct.UrlImage))
                                    {
                                        <img src="@GetProxyImageUrl(newProduct.UrlImage)" alt="Preview" style="max-width: 100px; max-height: 100px;" 
                                            onerror="this.onerror=null; this.src='images/no-image.png';" />
                                    }
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="updateProduct" OnValidSubmit="HandleValidSubmitUpdate">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <InputText id="productName" class="form-control" @bind-Value="updateProduct.ProductName" placeholder="Enter product name" />
                                <ValidationMessage For="@(() => updateProduct.ProductName)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Category <span class="text-danger">*</span></label>
                                <InputSelect id="categoryId" class="form-control" @bind-Value="updateProduct.CategoryId">
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => updateProduct.CategoryId)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="weight" class="form-label">Weight</label>
                                <InputText id="weight" class="form-control" @bind-Value="updateProduct.Weight" placeholder="Enter weight (e.g., 500g)" />
                                <ValidationMessage For="@(() => updateProduct.Weight)" />
                                <small class="text-muted">Enter a positive number followed by optional unit (e.g., 500g)</small>
                            </div>

                            <div class="mb-3">
                                <label for="unitPrice" class="form-label">Unit Price <span class="text-danger">*</span></label>
                                <InputNumber id="unitPrice" class="form-control" @bind-Value="updateProduct.UnitPrice" />
                                <ValidationMessage For="@(() => updateProduct.UnitPrice)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="unitsInStock" class="form-label">Units In Stock <span class="text-danger">*</span></label>
                                <InputNumber id="unitsInStock" class="form-control" @bind-Value="updateProduct.UnitsInStock" />
                                <ValidationMessage For="@(() => updateProduct.UnitsInStock)" />
                                <small class="text-muted">Required field</small>
                            </div>

                            <div class="mb-3">
                                <label for="urlImage" class="form-label">Image URL</label>
                                <InputText id="urlImage" class="form-control" @bind-Value="updateProduct.UrlImage" placeholder="Enter URL to product image" @onblur="ValidateImageUrlUpdate" />
                                <ValidationMessage For="@(() => updateProduct.UrlImage)" />
                                <div class="mt-2">
                                    @if (!string.IsNullOrEmpty(updateProduct.UrlImage))
                                    {
                                        <img src="@GetProxyImageUrl(updateProduct.UrlImage)" alt="Preview" style="max-width: 100px; max-height: 100px;" 
                                            onerror="this.onerror=null; this.src='images/no-image.png';" />
                                    }
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <!-- Backdrop behind the modal -->
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<ProductDTO> products;
    private List<CategoryDTO> categories;
    private HubConnection hubConnection;
    private bool showProductModal = false;
    private CreateProductDTO newProduct = new CreateProductDTO();
    private UpdateProductDTO updateProduct = new UpdateProductDTO();
    private bool isNewProduct = true;
    private string errorMessage = "";
    private DataAccessLayer.Entities.Member? currentUser;
    
    // DotNetObjectReference để gọi từ JS
    private DotNetObjectReference<ProductManagement> objRef;
    private bool isInitialized = false;

    // Lưu trữ URL hình ảnh đã chuyển đổi
    private Dictionary<string, string> convertedUrls = new Dictionary<string, string>();
    
    // Hàm lấy URL hình ảnh qua proxy nếu cần
    private string GetProxyImageUrl(string originalUrl)
    {
        if (string.IsNullOrEmpty(originalUrl))
            return string.Empty;
            
        // Kiểm tra xem URL đã được chuyển đổi chưa
        if (convertedUrls.TryGetValue(originalUrl, out string convertedUrl) && !string.IsNullOrEmpty(convertedUrl))
            return convertedUrl;
            
        // Kiểm tra nhanh xem URL có phải từ Facebook không
        if (originalUrl.Contains("facebook.com") || originalUrl.Contains("fbcdn.net") || originalUrl.Contains("fbsbx.com"))
            return $"/api/proxy/image?url={Uri.EscapeDataString(originalUrl)}";
            
        return originalUrl;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync started");
            
            // Load current user
            currentUser = await AuthService.GetCurrentUserAsync();
            
            // Tải danh sách categories trước
            await LoadCategories();
            
            // Sau đó tải danh sách products
            await LoadProducts();
            
            // Khởi tạo SignalR (không yêu cầu JS Interop)
            await SetupSignalR();
            
            Console.WriteLine("OnInitializedAsync completed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error initializing: {ex.Message}";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("OnAfterRenderAsync (firstRender) started");
                
                // Tạo đối tượng tham chiếu để JS có thể gọi đến các phương thức của component này
                objRef = DotNetObjectReference.Create(this);
                isInitialized = true;
                
                Console.WriteLine("OnAfterRenderAsync (firstRender) completed");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                errorMessage = $"Error initializing JS: {ex.Message}";
                StateHasChanged();
            }
        }
    }

    private async Task SetupSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/productHub"))
                .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(5) })
                .Build();

            hubConnection.On<ProductDTO>("ProductCreated", (product) => 
            {
                products.Add(product);
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<ProductDTO>("ProductUpdated", (product) => 
            {
                var index = products.FindIndex(p => p.ProductId == product.ProductId);
                if (index != -1)
                {
                    products[index] = product;
                    InvokeAsync(StateHasChanged);
                }
            });

            hubConnection.On<int>("ProductDeleted", (productId) => 
            {
                var product = products.FirstOrDefault(p => p.ProductId == productId);
                if (product != null)
                {
                    products.Remove(product);
                    InvokeAsync(StateHasChanged);
                }
            });

            // Xử lý sự kiện kết nối lại
            hubConnection.Closed += async (error) =>
            {
                Console.WriteLine($"Connection closed with error: {error?.Message}");
                await Task.Delay(new Random().Next(0, 5) * 1000);
                await hubConnection.StartAsync();
            };

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up SignalR: {ex.Message}");
            // Thử kết nối lại sau 5 giây nếu gặp lỗi
            await Task.Delay(5000);
            await SetupSignalR();
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            products = (await ProductService.GetAllProductsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            products = new List<ProductDTO>();
            errorMessage = $"Error loading products: {ex.Message}";
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var allCategories = await CategoryService.GetAllCategoriesAsync(1, 100);
            categories = Mapper.Map<List<CategoryDTO>>(allCategories);
            
            if (categories == null || categories.Count == 0)
            {
                Console.WriteLine("Warning: No categories found in database");
                categories = new List<CategoryDTO>();
                errorMessage = "No categories found. Please create categories first.";
            }
            else
            {
                Console.WriteLine($"Loaded {categories.Count} categories");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            categories = new List<CategoryDTO>();
            errorMessage = $"Error loading categories: {ex.Message}";
        }
    }

    private void ShowAddProductModal()
    {
        // Kiểm tra xem đã tải danh sách categories chưa
        if (categories == null || categories.Count == 0)
        {
            errorMessage = "No categories available. Please create categories first.";
            StateHasChanged();
            return;
        }
        
        // Reset the properties
        newProduct = new CreateProductDTO
        {
            ProductName = "",
            CategoryId = categories.FirstOrDefault()?.CategoryId ?? 0, // Sử dụng ID của category đầu tiên nếu có
            Weight = "",
            UnitsInStock = 0,
            UnitPrice = 0,
            UrlImage = ""
        };
        isNewProduct = true;
        errorMessage = ""; // Xóa thông báo lỗi khi mở modal mới
        showProductModal = true;
        StateHasChanged();
    }

    private void ShowEditProductModal(ProductDTO product)
    {
        updateProduct = new UpdateProductDTO
        {
            ProductId = product.ProductId,
            ProductName = product.ProductName ?? "",
            CategoryId = product.CategoryId,
            Weight = product.Weight ?? "",
            UnitPrice = product.UnitPrice,
            UnitsInStock = product.UnitsInStock,
            UrlImage = product.UrlImage ?? ""
        };
        isNewProduct = false;
        errorMessage = ""; // Xóa thông báo lỗi khi mở modal chỉnh sửa
        showProductModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showProductModal = false;
        errorMessage = ""; // Clear any error messages
        StateHasChanged();
    }

    // Hàm kiểm tra URL hình ảnh cho newProduct
    private async Task ValidateImageUrl()
    {
        if (!string.IsNullOrWhiteSpace(newProduct.UrlImage))
        {
            try
            {
                var result = await JSRuntime.InvokeAsync<ImageValidationResult>("imageUtils.validateImageUrl", newProduct.UrlImage);
                if (!result.IsValid)
                {
                    errorMessage = result.Message;
                    StateHasChanged();
                }
                else
                {
                    errorMessage = ""; // Xóa thông báo lỗi nếu URL hợp lệ
                    if (!string.IsNullOrEmpty(result.ConvertedUrl))
                    {
                        // Lưu URL đã chuyển đổi
                        convertedUrls[newProduct.UrlImage] = result.ConvertedUrl;
                    }
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error validating image URL: {ex.Message}");
                // Không hiển thị lỗi cho người dùng nếu có vấn đề với JS
            }
        }
    }

    // Hàm kiểm tra URL hình ảnh cho updateProduct
    private async Task ValidateImageUrlUpdate()
    {
        if (!string.IsNullOrWhiteSpace(updateProduct.UrlImage))
        {
            try
            {
                var result = await JSRuntime.InvokeAsync<ImageValidationResult>("imageUtils.validateImageUrl", updateProduct.UrlImage);
                if (!result.IsValid)
                {
                    errorMessage = result.Message;
                    StateHasChanged();
                }
                else
                {
                    errorMessage = ""; // Xóa thông báo lỗi nếu URL hợp lệ
                    if (!string.IsNullOrEmpty(result.ConvertedUrl))
                    {
                        // Lưu URL đã chuyển đổi
                        convertedUrls[updateProduct.UrlImage] = result.ConvertedUrl;
                    }
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error validating image URL: {ex.Message}");
                // Không hiển thị lỗi cho người dùng nếu có vấn đề với JS
            }
        }
    }

    // Class để deserialize kết quả kiểm tra URL hình ảnh
    private class ImageValidationResult
    {
        public bool IsValid { get; set; }
        public string Message { get; set; }
        public string ConvertedUrl { get; set; }
    }

    private async Task HandleValidSubmitCreate()
    {
        try
        {
            errorMessage = ""; // Xóa thông báo lỗi trước đó
            
            // Validate URL hình ảnh trước khi lưu
            if (!string.IsNullOrWhiteSpace(newProduct.UrlImage))
            {
                var result = await JSRuntime.InvokeAsync<ImageValidationResult>("imageUtils.validateImageUrl", newProduct.UrlImage);
                if (!result.IsValid)
                {
                    errorMessage = result.Message;
                    StateHasChanged();
                    return;
                }
            }
            
            Console.WriteLine("HandleValidSubmitCreate method called");
            Console.WriteLine($"Creating product: {newProduct.ProductName}");
            
            // Validate dữ liệu
            if (string.IsNullOrWhiteSpace(newProduct.ProductName))
            {
                errorMessage = "Product Name is required";
                Console.WriteLine("Validation error: Product Name is required");
                StateHasChanged();
                return;
            }
            
            // Validate Category ID
            if (newProduct.CategoryId <= 0)
            {
                errorMessage = "Please select a valid category";
                Console.WriteLine("Validation error: Invalid Category ID");
                StateHasChanged();
                return;
            }
            
            // Kiểm tra xem CategoryId có tồn tại trong danh sách categories không
            if (categories == null || !categories.Any(c => c.CategoryId == newProduct.CategoryId))
            {
                errorMessage = $"Category with ID {newProduct.CategoryId} does not exist";
                Console.WriteLine($"Validation error: Category with ID {newProduct.CategoryId} does not exist");
                StateHasChanged();
                return;
            }
            
            // Validate Weight format
            if (!string.IsNullOrWhiteSpace(newProduct.Weight) && !System.Text.RegularExpressions.Regex.IsMatch(newProduct.Weight, @"^[0-9]+[a-zA-Z]*$"))
            {
                errorMessage = "Weight must be a positive number followed by optional unit (e.g., 500g)";
                Console.WriteLine("Validation error: Invalid Weight format");
                StateHasChanged();
                return;
            }
            
            // Validate Unit Price không âm
            if (newProduct.UnitPrice < 0)
            {
                errorMessage = "Unit Price cannot be negative";
                Console.WriteLine("Validation error: Negative Unit Price");
                StateHasChanged();
                return;
            }
            
            // Validate Units In Stock không âm
            if (newProduct.UnitsInStock < 0)
            {
                errorMessage = "Units In Stock cannot be negative";
                Console.WriteLine("Validation error: Negative Units In Stock");
                StateHasChanged();
                return;
            }
            
            // Kiểm tra URL hình ảnh từ trang không cho phép CORS
            if (!string.IsNullOrWhiteSpace(newProduct.UrlImage))
            {
                if (newProduct.UrlImage.Contains("facebook.com") || 
                    newProduct.UrlImage.Contains("fbcdn.net") ||
                    newProduct.UrlImage.Contains("fbsbx.com"))
                {
                    errorMessage = "Images from Facebook cannot be directly embedded due to security restrictions. Please upload the image to an image hosting service first.";
                    Console.WriteLine("Validation error: Facebook image URL");
                    StateHasChanged();
                    return;
                }
            }
            
            // Gọi trực tiếp service
            await ProductService.CreateProductAsync(newProduct);
            Console.WriteLine("Product added successfully");
            
            // Đóng modal
            showProductModal = false;
            
            // Ensure UI updates
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("Modal closed and UI updated");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error saving product: {ex.Message}";
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task HandleValidSubmitUpdate()
    {
        try
        {
            errorMessage = ""; // Xóa thông báo lỗi trước đó
            
            // Validate URL hình ảnh trước khi cập nhật
            if (!string.IsNullOrWhiteSpace(updateProduct.UrlImage))
            {
                var result = await JSRuntime.InvokeAsync<ImageValidationResult>("imageUtils.validateImageUrl", updateProduct.UrlImage);
                if (!result.IsValid)
                {
                    errorMessage = result.Message;
                    StateHasChanged();
                    return;
                }
            }
            
            Console.WriteLine("HandleValidSubmitUpdate method called");
            Console.WriteLine($"Updating product ID {updateProduct.ProductId}: {updateProduct.ProductName}");
            
            // Validate dữ liệu
            if (updateProduct.ProductId <= 0)
            {
                errorMessage = "Product ID is invalid";
                Console.WriteLine("Validation error: Invalid Product ID");
                StateHasChanged();
                return;
            }
            
            if (string.IsNullOrWhiteSpace(updateProduct.ProductName))
            {
                errorMessage = "Product Name is required";
                Console.WriteLine("Validation error: Product Name is required");
                StateHasChanged();
                return;
            }
            
            // Validate Category ID
            if (updateProduct.CategoryId <= 0)
            {
                errorMessage = "Please select a valid category";
                Console.WriteLine("Validation error: Invalid Category ID");
                StateHasChanged();
                return;
            }
            
            // Kiểm tra xem CategoryId có tồn tại trong danh sách categories không
            if (categories == null || !categories.Any(c => c.CategoryId == updateProduct.CategoryId))
            {
                errorMessage = $"Category with ID {updateProduct.CategoryId} does not exist";
                Console.WriteLine($"Validation error: Category with ID {updateProduct.CategoryId} does not exist");
                StateHasChanged();
                return;
            }
            
            // Validate Weight format
            if (!string.IsNullOrWhiteSpace(updateProduct.Weight) && !System.Text.RegularExpressions.Regex.IsMatch(updateProduct.Weight, @"^[0-9]+[a-zA-Z]*$"))
            {
                errorMessage = "Weight must be a positive number followed by optional unit (e.g., 500g)";
                Console.WriteLine("Validation error: Invalid Weight format");
                StateHasChanged();
                return;
            }
            
            // Validate Unit Price không âm
            if (updateProduct.UnitPrice < 0)
            {
                errorMessage = "Unit Price cannot be negative";
                Console.WriteLine("Validation error: Negative Unit Price");
                StateHasChanged();
                return;
            }
            
            // Validate Units In Stock không âm
            if (updateProduct.UnitsInStock < 0)
            {
                errorMessage = "Units In Stock cannot be negative";
                Console.WriteLine("Validation error: Negative Units In Stock");
                StateHasChanged();
                return;
            }
            
            // Kiểm tra URL hình ảnh từ trang không cho phép CORS
            if (!string.IsNullOrWhiteSpace(updateProduct.UrlImage))
            {
                if (updateProduct.UrlImage.Contains("facebook.com") || 
                    updateProduct.UrlImage.Contains("fbcdn.net") ||
                    updateProduct.UrlImage.Contains("fbsbx.com"))
                {
                    errorMessage = "Images from Facebook cannot be directly embedded due to security restrictions. Please upload the image to an image hosting service first.";
                    Console.WriteLine("Validation error: Facebook image URL");
                    StateHasChanged();
                    return;
                }
            }
            
            // Gọi trực tiếp service
            await ProductService.UpdateProductAsync(updateProduct);
            Console.WriteLine("Product updated successfully");
            
            // Đóng modal
            showProductModal = false;
            
            // Ensure UI updates
            await InvokeAsync(() => StateHasChanged());
            Console.WriteLine("Modal closed and UI updated");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating product: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Error updating product: {ex.Message}";
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task DeleteProduct(int productId)
    {
        try 
        {
            Console.WriteLine($"Attempting to delete product with ID: {productId}");
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
            
            Console.WriteLine($"User confirmation: {confirmed}");
            if (confirmed)
            {
                try
                {
                    Console.WriteLine($"Deleting product with ID: {productId}");
                    await ProductService.DeleteProductAsync(productId);
                    Console.WriteLine($"Product with ID: {productId} deleted successfully");
                    // Không cần gọi LoadProducts ở đây vì SignalR sẽ cập nhật UI
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting product: {ex.Message}");
                    Console.WriteLine($"Stack trace: {ex.StackTrace}");
                    errorMessage = $"Error deleting product: {ex.Message}";
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                Console.WriteLine("User cancelled the delete operation");
            }
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Unexpected error in DeleteProduct: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            errorMessage = $"Unexpected error: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
        
        objRef?.Dispose();
    }
} 