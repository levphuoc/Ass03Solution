@using BLL.Services
@using DataAccessLayer.Entities
@using System.Security.Claims
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">eStore</a>
    </div>
</div>

<div class="auth-container">
    @if (_initialized && currentUser != null)
    {
        <div class="user-info">
            <div class="welcome-text">
                Welcome, @currentUser.CompanyName
                <span class="badge bg-secondary">@currentUser.Role</span>
            </div>
            <button @onclick="HandleLogoutClick" class="btn btn-outline-light logout-btn">Logout</button>
        </div>
    }
    else
    {
        <div class="login-link">
            <a class="btn btn-outline-light me-2" href="login">Login</a>
            <a class="btn btn-outline-light" href="register">Register</a>
        </div>
    }
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="cart">
                <span class="bi bi-cart-fill" aria-hidden="true"></span> Shopping Cart
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="salesReport">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Sales Report
            </NavLink>
        </div>
        <div class="nav-item px-3">
           
           
           
            <NavLink class="nav-link" href="members">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Members

            </NavLink>
            <NavLink class="nav-link" href="ordersShipper">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> OrderShipper

            </NavLink>
            <NavLink class="nav-link" href="ordersStaff">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> OrderStaff

            </NavLink>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="orders">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Order
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href=" trackingorders">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> tracking order
                </NavLink>
            </div>
        </div>
        @if (_initialized && currentUser != null)
        {
            @if (currentRoles.Contains("Admin") || currentRoles.Contains("Staff") || currentRoles.Contains("Member"))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="salesReport">
                        <span class="bi bi-graph-up-nav-menu" aria-hidden="true"></span> Sales Report
                    </NavLink>
                </div>
            }
            @if (currentRoles.Contains("Shipped") || currentRoles.Contains("Staff") || currentRoles.Contains("Member"))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="orders">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Order
                    </NavLink>
                </div>
            }

            @if (currentRoles.Contains("Admin") || currentRoles.Contains("Staff"))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="members">
                        <span class="bi bi-people-nav-menu" aria-hidden="true"></span> Members
                    </NavLink>
                </div>
            }

            @if (currentRoles.Contains("Admin"))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="products">
                        <span class="bi bi-box-nav-menu" aria-hidden="true"></span> Products
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                <NavLink class="nav-link" href=" trackingorders">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> tracking order
                </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="categories">
                        <span class="bi bi-tags-nav-menu" aria-hidden="true"></span> Categories
                    </NavLink>
                </div>
            }
            
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="userinfo">
                    <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> User Info
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private Member? currentUser;
    private List<string> currentRoles = new();
    private bool _initialized = false;
    private DotNetObjectReference<NavMenu> objRef;

    // Preload claims-based data instead of calling database
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Register for circuit events to detect connection state
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("window.registerNavMenu", objRef);
            
            // Subscribe to URL changes
            NavigationManager.LocationChanged += HandleLocationChanged;
            
            // Load initial data
            await LoadUserInfoFromClaims();
            _initialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing NavMenu: {ex.Message}");
        }
    }
    
    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // When URL changes, check auth status
        InvokeAsync(async () => 
        {
            await LoadUserInfoFromClaims();
            StateHasChanged();
        });
    }
    
    private async Task HandleLogoutClick()
    {
        try 
        {
            // First clear the local state
            currentUser = null;
            currentRoles.Clear();
            _initialized = true;
            StateHasChanged();
            
            // Then redirect to logout endpoint
            NavigationManager.NavigateTo("/api/auth/logout", true);
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
            // Fallback to direct navigation
            await JSRuntime.InvokeVoidAsync("window.location.href", "/api/auth/logout");
        }
    }

    [JSInvokable]
    public async Task RefreshAuthState()
    {
        await LoadUserInfoFromClaims();
        StateHasChanged();
    }
    
    private async Task LoadUserInfoFromClaims()
    {
        try
        {
            // Reset user state first
            currentUser = null;
            currentRoles.Clear();
            
            var context = HttpContextAccessor.HttpContext;
            if (context?.User?.Identity?.IsAuthenticated == true)
            {
                // First try to get data from claims
                var email = context.User.Identity.Name;
                var memberId = context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var companyName = context.User.FindFirst("CompanyName")?.Value;
                var role = context.User.FindFirst(ClaimTypes.Role)?.Value;
                
                if (!string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(companyName))
                {
                    // Create a basic user object from claims
                    currentUser = new Member
                    {
                        Email = email,
                        CompanyName = companyName,
                        Role = role ?? "User"
                    };
                    
                    if (int.TryParse(memberId, out int id))
                    {
                        currentUser.MemberId = id;
                    }
                    
                    // Collect roles for menu rendering
                    currentRoles = context.User.Claims
                        .Where(c => c.Type == ClaimTypes.Role)
                        .Select(c => c.Value)
                        .ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user from claims: {ex.Message}");
        }
    }
    
    public void Dispose()
    {
        try
        {
            // Unsubscribe from events to prevent memory leaks
            NavigationManager.LocationChanged -= HandleLocationChanged;
            objRef?.Dispose();
        }
        catch { /* Ignore disposal errors */ }
    }
}
}
